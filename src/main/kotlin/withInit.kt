class SimpleClass(val name: String, val age: Int) {
    // Блок init выполняется при создании объекта класса
    init {
        // Проверяем, что имя не пустое
        require(name.isNotBlank()) { "Name cannot be blank" }
        // Проверяем, что возраст положителен
        require(age > 0) { "Age must be positive" }

        println("Object is created with name: $name and age: $age")
    }

    // Пример функции в классе
    fun greet() {
        println("Hello, my name is $name and I am $age years old.")
    }
}

fun main() {
    val person = SimpleClass("John", 30)
    person.greet()
}

/**
 * Блок init и вторичные конструкторы в Kotlin служат разным целям, хотя их использование может пересекаться в
 * некоторых случаях. Вот основные различия между ними:
 *
 * Блок init: Этот блок инициализации выполняется всякий раз, когда создается новый экземпляр класса.
 * Блок init используется для инициализации свойств класса или выполнения кода, который должен быть выполнен при
 * создании каждого экземпляра класса. Блок init может быть использован вместе с основным конструктором класса.
 *
 * Вторичные конструкторы: В Kotlin классы могут иметь дополнительные конструкторы, которые называются вторичными
 * конструкторами. Они предоставляют дополнительные способы создания объектов класса, обычно с разными аргументами
 * или дополнительными проверками. Вторичные конструкторы должны вызывать основной конструктор класса или другой
 * вторичный конструктор, используя this().
 *
 * Да, можно сказать, что вторичный конструктор в Kotlin аналогичен перегруженному конструктору в других языках
 * программирования. Вторичные конструкторы предоставляют дополнительные способы создания объектов класса с разными
 * наборами аргументов или дополнительными проверками. Это позволяет предоставить клиентам вашего класса разные варианты
 * инициализации объекта в зависимости от их потребностей.
 *
 * Однако стоит отметить, что в Kotlin основной конструктор является предпочтительным способом определения конструктора
 * класса. Вторичные конструкторы полезны, когда необходимо предоставить дополнительные варианты инициализации, которые
 * не могут быть выражены через значения по умолчанию для параметров основного конструктора.
 * */
